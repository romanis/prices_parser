#!/usr/bin/env python3
"""
Demo script with sample data to show how the analyzer works.
This demonstrates the output format without needing to actually scrape.
"""

from price_analyzer import PriceAnalyzer
import pandas as pd

# Sample product data (realistic examples from Russian retail)
sample_products = [
    {
        "name": "–ú–æ–ª–æ–∫–æ –ü—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∏–Ω–æ 3,2% 1–ª",
        "price": 89.99,
        "old_price": 109.99,
        "price_text": "89,99 ‚ÇΩ",
        "image_url": "https://example.com/milk.jpg",
        "url": "/product/milk-1"
    },
    {
        "name": "–•–ª–µ–± –ë–æ—Ä–æ–¥–∏–Ω—Å–∫–∏–π –Ω–∞—Ä–µ–∑–Ω–æ–π 400–≥",
        "price": 45.50,
        "price_text": "45,50 ‚ÇΩ",
        "image_url": "https://example.com/bread.jpg",
        "url": "/product/bread-1"
    },
    {
        "name": "–ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–Ω–æ–µ 1–∫–≥",
        "price": 289.00,
        "old_price": 349.00,
        "price_text": "289,00 ‚ÇΩ",
        "image_url": "https://example.com/chicken.jpg",
        "url": "/product/chicken-1"
    },
    {
        "name": "–Ø–±–ª–æ–∫–∏ –ì–æ–ª–¥–µ–Ω 1–∫–≥",
        "price": 129.90,
        "price_text": "129,90 ‚ÇΩ",
        "image_url": "https://example.com/apples.jpg",
        "url": "/product/apples-1"
    },
    {
        "name": "–ú–∞—Å–ª–æ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ –ó–æ–ª–æ—Ç–∞—è –°–µ–º–µ—á–∫–∞ 1–ª",
        "price": 159.99,
        "old_price": 199.99,
        "price_text": "159,99 ‚ÇΩ",
        "image_url": "https://example.com/oil.jpg",
        "url": "/product/oil-1"
    },
    {
        "name": "–°—ã—Ä –†–æ—Å—Å–∏–π—Å–∫–∏–π 45% 200–≥",
        "price": 179.00,
        "old_price": 229.00,
        "price_text": "179,00 ‚ÇΩ",
        "image_url": "https://example.com/cheese.jpg",
        "url": "/product/cheese-1"
    },
    {
        "name": "–ô–æ–≥—É—Ä—Ç –ê–∫—Ç–∏–≤–∏–∞ –∫–ª—É–±–Ω–∏–∫–∞ 150–≥",
        "price": 35.50,
        "price_text": "35,50 ‚ÇΩ",
        "image_url": "https://example.com/yogurt.jpg",
        "url": "/product/yogurt-1"
    },
    {
        "name": "–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è –î–æ–∫—Ç–æ—Ä—Å–∫–∞—è 400–≥",
        "price": 249.00,
        "old_price": 299.00,
        "price_text": "249,00 ‚ÇΩ",
        "image_url": "https://example.com/sausage.jpg",
        "url": "/product/sausage-1"
    },
    {
        "name": "–ë–∞–Ω–∞–Ω—ã 1–∫–≥",
        "price": 79.90,
        "price_text": "79,90 ‚ÇΩ",
        "image_url": "https://example.com/bananas.jpg",
        "url": "/product/bananas-1"
    },
    {
        "name": "–¢–≤–æ—Ä–æ–≥ 9% –ü—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∏–Ω–æ 200–≥",
        "price": 89.00,
        "old_price": 109.00,
        "price_text": "89,00 ‚ÇΩ",
        "image_url": "https://example.com/cottage.jpg",
        "url": "/product/cottage-1"
    },
    {
        "name": "–ú–∞–∫–∞—Ä–æ–Ω—ã Makfa —Å–ø–∞–≥–µ—Ç—Ç–∏ 450–≥",
        "price": 69.90,
        "price_text": "69,90 ‚ÇΩ",
        "image_url": "https://example.com/pasta.jpg",
        "url": "/product/pasta-1"
    },
    {
        "name": "–°–º–µ—Ç–∞–Ω–∞ 20% –î–æ–º–∏–∫ –≤ –¥–µ—Ä–µ–≤–Ω–µ 300–≥",
        "price": 119.00,
        "old_price": 149.00,
        "price_text": "119,00 ‚ÇΩ",
        "image_url": "https://example.com/sour-cream.jpg",
        "url": "/product/sour-cream-1"
    },
    {
        "name": "–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ –°0 10—à—Ç",
        "price": 95.00,
        "price_text": "95,00 ‚ÇΩ",
        "image_url": "https://example.com/eggs.jpg",
        "url": "/product/eggs-1"
    },
    {
        "name": "–†–∏—Å –ú–∏—Å—Ç—Ä–∞–ª—å –¥–ª–∏–Ω–Ω–æ–∑–µ—Ä–Ω—ã–π 900–≥",
        "price": 149.00,
        "old_price": 189.00,
        "price_text": "149,00 ‚ÇΩ",
        "image_url": "https://example.com/rice.jpg",
        "url": "/product/rice-1"
    },
    {
        "name": "–°–∞—Ö–∞—Ä-–ø–µ—Å–æ–∫ 1–∫–≥",
        "price": 69.50,
        "price_text": "69,50 ‚ÇΩ",
        "image_url": "https://example.com/sugar.jpg",
        "url": "/product/sugar-1"
    },
    {
        "name": "–ì—Ä–µ—á–∫–∞ —è–¥—Ä–∏—Ü–∞ 900–≥",
        "price": 89.90,
        "old_price": 119.90,
        "price_text": "89,90 ‚ÇΩ",
        "image_url": "https://example.com/buckwheat.jpg",
        "url": "/product/buckwheat-1"
    },
    {
        "name": "–¢–æ–º–∞—Ç—ã —Å–≤–µ–∂–∏–µ 1–∫–≥",
        "price": 199.00,
        "price_text": "199,00 ‚ÇΩ",
        "image_url": "https://example.com/tomatoes.jpg",
        "url": "/product/tomatoes-1"
    },
    {
        "name": "–û–≥—É—Ä—Ü—ã —Å–≤–µ–∂–∏–µ 1–∫–≥",
        "price": 149.00,
        "price_text": "149,00 ‚ÇΩ",
        "image_url": "https://example.com/cucumbers.jpg",
        "url": "/product/cucumbers-1"
    },
    {
        "name": "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ –ü–ª–æ–º–±–∏—Ä —ç—Å–∫–∏–º–æ 80–≥",
        "price": 45.00,
        "old_price": 59.00,
        "price_text": "45,00 ‚ÇΩ",
        "image_url": "https://example.com/icecream.jpg",
        "url": "/product/icecream-1"
    },
    {
        "name": "–ß–∞–π Greenfield Earl Grey 25 –ø–∞–∫.",
        "price": 139.00,
        "price_text": "139,00 ‚ÇΩ",
        "image_url": "https://example.com/tea.jpg",
        "url": "/product/tea-1"
    },
]


def main():
    """Run demo with sample data."""
    print("\n" + "=" * 70)
    print("DEMO: PRICE SCRAPER OUTPUT WITH SAMPLE DATA")
    print("=" * 70)
    print("\nThis demo shows what the scraper output looks like.")
    print("Using sample retail product data from Russian grocery stores.")
    print()
    
    # Show sample products
    print("\nüì¶ SAMPLE PARSED PRODUCTS:")
    print("-" * 70)
    for i, product in enumerate(sample_products[:5], 1):
        print(f"\n{i}. {product['name']}")
        print(f"   Current Price: {product['price']:.2f} ‚ÇΩ")
        if 'old_price' in product:
            discount_pct = (product['old_price'] - product['price']) / product['old_price'] * 100
            print(f"   Old Price: {product['old_price']:.2f} ‚ÇΩ")
            print(f"   Discount: {discount_pct:.1f}% OFF")
        print(f"   URL: {product.get('url', 'N/A')}")
    
    print(f"\n... and {len(sample_products) - 5} more products")
    
    # Create analyzer
    analyzer = PriceAnalyzer()
    
    # Analyze products
    print("\n\nüìä ANALYZING PRODUCTS...")
    analysis = analyzer.analyze_products(sample_products, '5ka_demo')
    
    # Find best deals
    best_deals = analyzer.find_best_deals(sample_products, top_n=5)
    
    print("\n\nüî• TOP 5 BEST DEALS:")
    print("-" * 70)
    for i, deal in enumerate(best_deals, 1):
        print(f"\n{i}. {deal['name']}")
        print(f"   Now: {deal['price']:.2f} ‚ÇΩ (was {deal['old_price']:.2f} ‚ÇΩ)")
        print(f"   Save: {deal['savings']:.2f} ‚ÇΩ ({deal['discount_percent']:.1f}% off)")
    
    # Save results
    print("\n\nüíæ SAVING RESULTS...")
    analyzer.save_results(sample_products, analysis, '5ka_demo')
    
    # Show CSV preview
    print("\n\nüìÑ CSV FILE PREVIEW (first 10 rows):")
    print("-" * 70)
    df = pd.DataFrame(sample_products)
    print(df[['name', 'price', 'old_price']].head(10).to_string(index=False))
    
    # Show files created
    import os
    print("\n\n‚úÖ FILES CREATED IN output/ DIRECTORY:")
    print("-" * 70)
    output_files = [f for f in os.listdir('output') if '5ka_demo' in f]
    for file in sorted(output_files):
        file_path = os.path.join('output', file)
        size = os.path.getsize(file_path)
        print(f"   üìÅ {file} ({size:,} bytes)")
    
    print("\n" + "=" * 70)
    print("DEMO COMPLETE!")
    print("=" * 70)
    print("\nCheck the 'output' directory to see the generated files.")
    print("\nNote: For real scraping of 5ka.ru, you would need to:")
    print("  1. Use Selenium (JavaScript-rendered site)")
    print("  2. Handle their bot protection")
    print("  3. Or use their API if available")
    print()


if __name__ == '__main__':
    main()

